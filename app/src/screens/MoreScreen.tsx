import React from 'react';
import { ScrollView, StyleSheet, View, Alert } from 'react-native';
import { 
  Card, 
  List, 
  Switch, 
  useTheme,
  Divider,
  Text,
  Button
} from 'react-native-paper';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useSelector, useDispatch } from 'react-redux';
import { RootState } from '../store/store';
import { setMode } from '../store/slices/appSlice';

export default function MoreScreen() {
  const theme = useTheme();
  const dispatch = useDispatch();
  const { mode } = useSelector((state: RootState) => state.app);
  
  const [darkMode, setDarkMode] = React.useState(false);
  const [notifications, setNotifications] = React.useState(true);
  const [autoSync, setAutoSync] = React.useState(true);

  const handleEmergencyMode = () => {
    Alert.alert(
      'ÏúÑÍ∏∞ Î™®Îìú Ï†ÑÌôò',
      'ÏúÑÍ∏∞ Î™®ÎìúÎ°ú Ï†ÑÌôòÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        { 
          text: 'Ï†ÑÌôò', 
          style: 'destructive',
          onPress: () => dispatch(setMode('crisis'))
        },
      ]
    );
  };

  const handleExportData = () => {
    Alert.alert('Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞', 'Î™®Îì† Îç∞Ïù¥ÌÑ∞Î•º ÎÇ¥Î≥¥ÎÇ¥ÏãúÍ≤†ÏäµÎãàÍπå?');
  };

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView>
        {/* ÏÑ§Ï†ï */}
        <Card style={styles.card}>
          <Card.Title title="‚öôÔ∏è ÏÑ§Ï†ï" />
          <Card.Content>
            <List.Item
              title="Îã§ÌÅ¨ Î™®Îìú"
              description="Ïñ¥ÎëêÏö¥ ÌôòÍ≤ΩÏóêÏÑú ÏÇ¨Ïö©"
              left={() => <List.Icon icon="theme-light-dark" />}
              right={() => (
                <Switch
                  value={darkMode}
                  onValueChange={setDarkMode}
                />
              )}
            />
            <Divider />
            <List.Item
              title="ÏïåÎ¶º"
              description="Ìë∏Ïãú ÏïåÎ¶º Î∞õÍ∏∞"
              left={() => <List.Icon icon="bell" />}
              right={() => (
                <Switch
                  value={notifications}
                  onValueChange={setNotifications}
                />
              )}
            />
            <Divider />
            <List.Item
              title="ÏûêÎèô ÎèôÍ∏∞Ìôî"
              description="Îç∞Ïù¥ÌÑ∞ ÏûêÎèô Î∞±ÏóÖ"
              left={() => <List.Icon icon="sync" />}
              right={() => (
                <Switch
                  value={autoSync}
                  onValueChange={setAutoSync}
                />
              )}
            />
          </Card.Content>
        </Card>

        {/* Ïö¥ÏòÅ Î™®Îìú */}
        <Card style={styles.card}>
          <Card.Title title="üé¨ Ïö¥ÏòÅ Î™®Îìú" />
          <Card.Content>
            <View style={styles.modeButtons}>
              <Button 
                mode={mode === 'normal' ? 'contained' : 'outlined'}
                onPress={() => dispatch(setMode('normal'))}
                style={styles.modeButton}
              >
                ÏùºÎ∞ò
              </Button>
              <Button 
                mode={mode === 'production' ? 'contained' : 'outlined'}
                onPress={() => dispatch(setMode('production'))}
                style={styles.modeButton}
              >
                Ï¥¨ÏòÅÏ§ë
              </Button>
              <Button 
                mode={mode === 'crisis' ? 'contained' : 'outlined'}
                onPress={handleEmergencyMode}
                style={styles.modeButton}
                buttonColor={theme.colors.error}
              >
                ÏúÑÍ∏∞
              </Button>
            </View>
          </Card.Content>
        </Card>

        {/* Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨ */}
        <Card style={styles.card}>
          <Card.Title title="üíæ Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨" />
          <Card.Content>
            <List.Item
              title="Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞"
              description="Î™®Îì† Îç∞Ïù¥ÌÑ∞Î•º ÌååÏùºÎ°ú Ï†ÄÏû•"
              left={() => <List.Icon icon="export" />}
              onPress={handleExportData}
            />
            <Divider />
            <List.Item
              title="Ï∫êÏãú Ï†ïÎ¶¨"
              description="ÏûÑÏãú ÌååÏùº ÏÇ≠Ï†ú"
              left={() => <List.Icon icon="broom" />}
              onPress={() => Alert.alert('Ï∫êÏãú Ï†ïÎ¶¨', 'Ï∫êÏãúÎ•º Ï†ïÎ¶¨ÌïòÏãúÍ≤†ÏäµÎãàÍπå?')}
            />
          </Card.Content>
        </Card>

        {/* ÎèÑÏõÄÎßê */}
        <Card style={styles.card}>
          <Card.Title title="‚ùì ÎèÑÏõÄÎßê" />
          <Card.Content>
            <List.Item
              title="ÏÇ¨Ïö© Í∞ÄÏù¥Îìú"
              description="Ïï± ÏÇ¨Ïö© Î∞©Î≤ï"
              left={() => <List.Icon icon="book-open-variant" />}
              onPress={() => {}}
            />
            <Divider />
            <List.Item
              title="ÎπÑÏÉÅ Ïó∞ÎùΩÏ≤ò"
              description="Í∏¥Í∏â ÏÉÅÌô© Ïó∞ÎùΩÏ≤ò Î™©Î°ù"
              left={() => <List.Icon icon="phone-alert" />}
              onPress={() => {}}
            />
            <Divider />
            <List.Item
              title="Î≤ÑÏ†Ñ Ï†ïÎ≥¥"
              description="v1.0.0"
              left={() => <List.Icon icon="information" />}
            />
          </Card.Content>
        </Card>

        {/* Í≥ÑÏ†ï */}
        <Card style={styles.card}>
          <Card.Title title="üë§ Í≥ÑÏ†ï" />
          <Card.Content>
            <List.Item
              title="ÌòÑÏû• Ï¥ùÍ¥Ñ"
              description="Í∂åÌïú: Ï†ÑÏ≤¥ Í¥ÄÎ¶¨Ïûê"
              left={() => <List.Icon icon="account-circle" />}
            />
            <Divider />
            <List.Item
              title="Î°úÍ∑∏ÏïÑÏõÉ"
              description="Í≥ÑÏ†ïÏóêÏÑú Î°úÍ∑∏ÏïÑÏõÉ"
              left={() => <List.Icon icon="logout" color={theme.colors.error} />}
              onPress={() => Alert.alert('Î°úÍ∑∏ÏïÑÏõÉ', 'Î°úÍ∑∏ÏïÑÏõÉ ÌïòÏãúÍ≤†ÏäµÎãàÍπå?')}
            />
          </Card.Content>
        </Card>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  card: {
    margin: 16,
    marginBottom: 8,
  },
  modeButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 8,
  },
  modeButton: {
    flex: 1,
    marginHorizontal: 4,
  },
});